import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { StyleSheet, ScrollView, ActivityIndicator, TouchableOpacity } from 'react-native';
import { ThemedView } from '@/components/ThemedView';
import { TopBar } from '@/components/TopBar';
import { ThemedText } from '@/components/ThemedText';
import { getFirestore, collection, getDocs } from 'firebase/firestore';
import { formatDate } from '@/utils/firebase';
import DateTimePicker from '@react-native-community/datetimepicker';
import { AntDesign } from '@expo/vector-icons';
import { BottomSheetModal, BottomSheetModalProvider, BottomSheetScrollView } from '@gorhom/bottom-sheet';
import { GestureHandlerRootView } from 'react-native-gesture-handler';

interface ProductStats {
  productName: string;
  branchStats: {
    [key: string]: {
      quantity: number;
      dates: { [date: string]: number };
    };
  };
  totalQuantity: number;
  dateRange: {
    startDate: string;
    endDate: string;
  };
}

interface DailyStats {
  date: string;
  quantity: number;
}

export default function ProductStatisticsScreen() {
  const [loading, setLoading] = useState(true);
  const [productStats, setProductStats] = useState<ProductStats[]>([]);
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());
  const [showStartPicker, setShowStartPicker] = useState(false);
  const [showEndPicker, setShowEndPicker] = useState(false);
  const [viewMode, setViewMode] = useState<'summary' | 'daily'>('summary');
  const [showBottomSheet, setShowBottomSheet] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState('');
  const [selectedBranch, setSelectedBranch] = useState('');
  const [dailyStats, setDailyStats] = useState<DailyStats[]>([]);
  const [availableProducts, setAvailableProducts] = useState<string[]>([]);
  const [availableBranches, setAvailableBranches] = useState<string[]>([]);
  const bottomSheetModalRef = React.useRef<BottomSheetModal>(null);
  const snapPoints = useMemo(() => ['50%'], []);

  const handlePresentModalPress = useCallback(() => {
    bottomSheetModalRef.current?.present();
  }, []);

  const handleSheetChanges = useCallback((index: number) => {
    if (index === -1) {
      setShowBottomSheet(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [startDate, endDate]);

  const onStartDateChange = (event: any, selectedDate?: Date) => {
    setShowStartPicker(false);
    if (selectedDate) {
      setStartDate(selectedDate);
    }
  };

  const onEndDateChange = (event: any, selectedDate?: Date) => {
    setShowEndPicker(false);
    if (selectedDate) {
      setEndDate(selectedDate);
    }
  };

  const getDatesInRange = (start: Date, end: Date) => {
    const dates = [];
    const current = new Date(start);
    const endTime = new Date(end);

    while (current <= endTime) {
      dates.push(formatDate(new Date(current)));
      current.setDate(current.getDate() + 1);
    }
    return dates;
  };

  const fetchData = async () => {
    try {
      setLoading(true);
      const db = getFirestore();
      const stats: { [key: string]: ProductStats } = {};
      
      const dates = getDatesInRange(startDate, endDate);

      // Fetch data for each date
      for (const date of dates) {
        const ordersRef = collection(db, 'orders', date, 'branches');
        const branchesSnapshot = await getDocs(ordersRef);

        branchesSnapshot.forEach((branchDoc) => {
          const branchData = branchDoc.data();
          const branchName = branchDoc.id;

          Object.entries(branchData).forEach(([product, quantity]) => {
            if (!stats[product]) {
              stats[product] = {
                productName: product,
                branchStats: {},
                totalQuantity: 0,
                dateRange: {
                  startDate: formatDate(startDate),
                  endDate: formatDate(endDate)
                }
              };
            }

            const numericQuantity = parseInt(quantity as string, 10);
            
            if (!stats[product].branchStats[branchName]) {
              stats[product].branchStats[branchName] = {
                quantity: 0,
                dates: {}
              };
            }

            stats[product].branchStats[branchName].quantity += numericQuantity;
            stats[product].branchStats[branchName].dates[date] = (stats[product].branchStats[branchName].dates[date] || 0) + numericQuantity;
            stats[product].totalQuantity += numericQuantity;
          });
        });
      }

      setProductStats(Object.values(stats).sort((a, b) => b.totalQuantity - a.totalQuantity));
      setLoading(false);
    } catch (error) {
      console.error('Error fetching data:', error);
      setLoading(false);
    }
  };

  const fetchDailyStats = async () => {
    if (!selectedProduct || !selectedBranch) return;

    try {
      setLoading(true);
      const dates = getDatesInRange(startDate, endDate);
      const dailyData: DailyStats[] = [];

      for (const date of dates) {
        const db = getFirestore();
        const branchRef = collection(db, 'orders', date, 'branches');
        const branchSnapshot = await getDocs(branchRef);
        
        branchSnapshot.forEach((doc) => {
          if (doc.id === selectedBranch) {
            const data = doc.data();
            if (data[selectedProduct]) {
              dailyData.push({
                date,
                quantity: parseInt(data[selectedProduct] as string, 10)
              });
            } else {
              dailyData.push({ date, quantity: 0 });
            }
          }
        });
      }

      setDailyStats(dailyData);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching daily stats:', error);
      setLoading(false);
    }
  };

  useEffect(() => {
    if (viewMode === 'summary') {
      fetchData();
    } else if (viewMode === 'daily') {
      fetchDailyStats();
    }
  }, [startDate, endDate, viewMode, selectedProduct, selectedBranch]);

  const renderSummaryView = () => (
    <ScrollView style={styles.scrollView}>
      {productStats.map((stat, index) => (
        <ThemedView key={index} style={styles.productCard}>
          <ThemedView style={styles.productHeader}>
            <ThemedText style={styles.productName}>
              {stat.productName}
            </ThemedText>
            <ThemedText style={styles.totalQuantity}>
              Ümumi: {stat.totalQuantity} ədəd
            </ThemedText>
          </ThemedView>
          
          <ThemedView style={styles.tableContainer}>
            <ThemedView style={styles.tableHeader}>
              <ThemedText style={[styles.columnHeader, { flex: 1.5 }]}>Filial</ThemedText>
              <ThemedText style={styles.columnHeader}>Miqdar</ThemedText>
              <ThemedText style={styles.columnHeader}>%</ThemedText>
            </ThemedView>
            
            {Object.entries(stat.branchStats)
              .sort(([, a], [, b]) => b.quantity - a.quantity)
              .map(([branchName, branchStat], bIndex) => (
                <ThemedView 
                  key={bIndex} 
                  style={[
                    styles.tableRow,
                    bIndex % 2 === 0 ? styles.evenRow : styles.oddRow
                  ]}
                >
                  <ThemedText style={[styles.branchName, { flex: 1.5 }]}>{branchName}</ThemedText>
                  <ThemedText style={styles.quantity}>{branchStat.quantity} ədəd</ThemedText>
                  <ThemedText style={styles.percentage}>
                    {((branchStat.quantity / stat.totalQuantity) * 100).toFixed(1)}%
                  </ThemedText>
                </ThemedView>
              ))}
          </ThemedView>
        </ThemedView>
      ))}
    </ScrollView>
  );

  const renderDailyView = () => (
    <ScrollView style={styles.scrollView}>
      <TouchableOpacity 
        style={styles.selectionButton} 
        onPress={handlePresentModalPress}
      >
        <ThemedText style={styles.selectionButtonText}>
          {selectedProduct && selectedBranch 
            ? `${selectedProduct} - ${selectedBranch}` 
            : 'Məhsul və Filial seçin'}
        </ThemedText>
        <AntDesign name="down" size={20} color="#4A3531" />
      </TouchableOpacity>

      {selectedProduct && selectedBranch && (
        <ThemedView style={styles.productCard}>
          <ThemedView style={styles.tableContainer}>
            <ThemedView style={styles.tableHeader}>
              <ThemedText style={styles.columnHeader}>Tarix</ThemedText>
              <ThemedText style={styles.columnHeader}>Miqdar</ThemedText>
            </ThemedView>
            
            {dailyStats.map((stat, index) => (
              <ThemedView 
                key={index} 
                style={[
                  styles.tableRow,
                  index % 2 === 0 ? styles.evenRow : styles.oddRow
                ]}
              >
                <ThemedText style={styles.date}>{stat.date}</ThemedText>
                <ThemedText style={styles.quantity}>{stat.quantity} ədəd</ThemedText>
              </ThemedView>
            ))}
          </ThemedView>
        </ThemedView>
      )}
    </ScrollView>
  );

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <BottomSheetModalProvider>
        <ThemedView style={styles.container}>
          <TopBar 
            title="Məhsul Statistikası" 
            style={styles.topBar}
          />
          
          <ThemedView style={styles.viewSwitchContainer}>
            <TouchableOpacity 
              style={[
                styles.viewSwitchButton, 
                viewMode === 'summary' && styles.activeViewButton
              ]}
              onPress={() => setViewMode('summary')}
            >
              <ThemedText style={[
                styles.viewSwitchText,
                viewMode === 'summary' && styles.activeViewText
              ]}>
                Ümumi Baxış
              </ThemedText>
            </TouchableOpacity>

            <TouchableOpacity 
              style={[
                styles.viewSwitchButton,
                viewMode === 'daily' && styles.activeViewButton
              ]}
              onPress={() => setViewMode('daily')}
            >
              <ThemedText style={[
                styles.viewSwitchText,
                viewMode === 'daily' && styles.activeViewText
              ]}>
                Günlük Baxış
              </ThemedText>
            </TouchableOpacity>
          </ThemedView>

          <ThemedView style={styles.datePickerContainer}>
            <TouchableOpacity 
              style={styles.dateButton} 
              onPress={() => setShowStartPicker(true)}
            >
              <ThemedText style={styles.dateButtonText}>
                Başlanğıc: {formatDate(startDate)}
              </ThemedText>
              <AntDesign name="calendar" size={20} color="#4A3531" />
            </TouchableOpacity>

            <TouchableOpacity 
              style={styles.dateButton} 
              onPress={() => setShowEndPicker(true)}
            >
              <ThemedText style={styles.dateButtonText}>
                Son: {formatDate(endDate)}
              </ThemedText>
              <AntDesign name="calendar" size={20} color="#4A3531" />
            </TouchableOpacity>

            {showStartPicker && (
              <DateTimePicker
                value={startDate}
                mode="date"
                onChange={onStartDateChange}
              />
            )}

            {showEndPicker && (
              <DateTimePicker
                value={endDate}
                mode="date"
                onChange={onEndDateChange}
              />
            )}
          </ThemedView>

          {loading ? (
            <ThemedView style={styles.loadingContainer}>
              <ActivityIndicator size="large" />
            </ThemedView>
          ) : (
            viewMode === 'summary' ? renderSummaryView() : renderDailyView()
          )}

          <BottomSheetModal
            ref={bottomSheetModalRef}
            index={0}
            snapPoints={['75%']}
            onChange={handleSheetChanges}
            enablePanDownToClose={true}
            backgroundStyle={styles.bottomSheetBackground}
            handleIndicatorStyle={styles.bottomSheetIndicator}
          >
            <ThemedView style={styles.bottomSheetContent}>
              <ThemedText style={styles.bottomSheetMainTitle}>
                {selectedProduct ? 'Filial Seçin' : 'Məhsul Seçin'}
              </ThemedText>
              
              {!selectedProduct ? (
                <BottomSheetScrollView contentContainerStyle={styles.bottomSheetScrollViewContent}>
                  {productStats.map((stat, index) => (
                    <TouchableOpacity
                      key={index}
                      style={[
                        styles.bottomSheetItem,
                        selectedProduct === stat.productName && styles.selectedItem
                      ]}
                      onPress={() => {
                        setSelectedProduct(stat.productName);
                        setAvailableBranches(Object.keys(stat.branchStats));
                      }}
                    >
                      <ThemedView style={styles.bottomSheetItemContent}>
                        <ThemedText style={[
                          styles.bottomSheetItemText,
                          selectedProduct === stat.productName && styles.selectedItemText
                        ]}>
                          {stat.productName}
                        </ThemedText>
                        <ThemedText style={[
                          styles.bottomSheetItemSubtext,
                          selectedProduct === stat.productName && styles.selectedItemText
                        ]}>
                          Ümumi: {stat.totalQuantity} ədəd
                        </ThemedText>
                      </ThemedView>
                      <AntDesign 
                        name="right" 
                        size={20} 
                        color={selectedProduct === stat.productName ? '#fff' : '#4A3531'} 
                      />
                    </TouchableOpacity>
                  ))}
                </BottomSheetScrollView>
              ) : (
                <ThemedView style={styles.branchSelectionContainer}>
                  <TouchableOpacity 
                    style={styles.backButton}
                    onPress={() => setSelectedProduct('')}
                  >
                    <AntDesign name="left" size={20} color="#4A3531" />
                    <ThemedText style={styles.backButtonText}>Geri</ThemedText>
                  </TouchableOpacity>

                  <BottomSheetScrollView contentContainerStyle={styles.bottomSheetScrollViewContent}>
                    {availableBranches.map((branch, index) => (
                      <TouchableOpacity
                        key={index}
                        style={[
                          styles.bottomSheetItem,
                          selectedBranch === branch && styles.selectedItem
                        ]}
                        onPress={() => {
                          setSelectedBranch(branch);
                          bottomSheetModalRef.current?.dismiss();
                        }}
                      >
                        <ThemedText style={[
                          styles.bottomSheetItemText,
                          selectedBranch === branch && styles.selectedItemText
                        ]}>
                          {branch}
                        </ThemedText>
                        <AntDesign 
                          name="check" 
                          size={20} 
                          color={selectedBranch === branch ? '#fff' : 'transparent'} 
                        />
                      </TouchableOpacity>
                    ))}
                  </BottomSheetScrollView>
                </ThemedView>
              )}
            </ThemedView>
          </BottomSheetModal>
        </ThemedView>
      </BottomSheetModalProvider>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  topBar: {
    paddingHorizontal: 24,
    paddingTop: 24,
  },
  datePickerContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(74, 53, 49, 0.1)',
  },
  dateButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(74, 53, 49, 0.05)',
    padding: 12,
    borderRadius: 8,
    flex: 0.48,
  },
  dateButtonText: {
    fontSize: 14,
    color: '#4A3531',
    marginRight: 8,
    flex: 1,
  },
  scrollView: {
    flex: 1,
    padding: 16,
  },
  productCard: {
    marginBottom: 20,
    borderRadius: 16,
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    overflow: 'hidden',
  },
  productHeader: {
    padding: 16,
    backgroundColor: 'rgba(74, 53, 49, 0.05)',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(74, 53, 49, 0.1)',
  },
  productName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#4A3531',
    marginBottom: 4,
  },
  totalQuantity: {
    fontSize: 16,
    color: '#4A3531',
    fontWeight: '600',
  },
  tableContainer: {
    padding: 16,
  },
  tableHeader: {
    flexDirection: 'row',
    paddingVertical: 12,
    borderBottomWidth: 2,
    borderBottomColor: 'rgba(74, 53, 49, 0.1)',
    marginBottom: 8,
  },
  columnHeader: {
    flex: 1,
    fontWeight: 'bold',
    color: '#4A3531',
    fontSize: 15,
    textAlign: 'center',
  },
  tableRow: {
    flexDirection: 'row',
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 8,
    marginVertical: 2,
  },
  evenRow: {
    backgroundColor: 'rgba(74, 53, 49, 0.03)',
  },
  oddRow: {
    backgroundColor: '#fff',
  },
  branchName: {
    flex: 1,
    fontSize: 15,
    color: '#4A3531',
    paddingLeft: 8,
  },
  quantity: {
    flex: 1,
    fontSize: 15,
    color: '#4A3531',
    textAlign: 'center',
  },
  percentage: {
    flex: 1,
    fontSize: 15,
    color: '#4A3531',
    textAlign: 'center',
  },
  viewSwitchContainer: {
    flexDirection: 'row',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(74, 53, 49, 0.1)',
  },
  viewSwitchButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginHorizontal: 4,
    backgroundColor: 'rgba(74, 53, 49, 0.05)',
  },
  activeViewButton: {
    backgroundColor: '#4A3531',
  },
  viewSwitchText: {
    fontSize: 14,
    color: '#4A3531',
    fontWeight: '600',
  },
  activeViewText: {
    color: '#fff',
  },
  selectionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 8,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  selectionButtonText: {
    flex: 1,
    fontSize: 16,
    color: '#4A3531',
  },
  bottomSheetBackground: {
    backgroundColor: '#fff',
    borderTopLeftRadius: 24,
    borderTopRightRadius: 24,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: -4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
  },
  bottomSheetIndicator: {
    backgroundColor: '#4A3531',
    width: 40,
    height: 4,
    borderRadius: 2,
  },
  bottomSheetContent: {
    flex: 1,
    padding: 24,
  },
  bottomSheetMainTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4A3531',
    marginBottom: 24,
    textAlign: 'center',
  },
  bottomSheetScrollViewContent: {
    paddingBottom: 24,
  },
  bottomSheetItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    backgroundColor: 'rgba(74, 53, 49, 0.05)',
    borderWidth: 1,
    borderColor: 'rgba(74, 53, 49, 0.1)',
  },
  bottomSheetItemContent: {
    flex: 1,
  },
  selectedItem: {
    backgroundColor: '#4A3531',
    borderColor: '#4A3531',
  },
  bottomSheetItemText: {
    fontSize: 18,
    color: '#4A3531',
    marginBottom: 4,
  },
  bottomSheetItemSubtext: {
    fontSize: 14,
    color: '#666',
  },
  selectedItemText: {
    color: '#fff',
  },
  branchSelectionContainer: {
    flex: 1,
  },
  backButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    marginBottom: 16,
  },
  backButtonText: {
    fontSize: 16,
    color: '#4A3531',
    marginLeft: 8,
  },
  date: {
    flex: 1,
    fontSize: 15,
    color: '#4A3531',
    textAlign: 'center',
  },
}); 